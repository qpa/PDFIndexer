/*
 * IndexerPanel.java
 */
package com.pdfindexer.gui;

/**
 * Class for managing indexes.
 * @author Qpa
 */
public class IndexerPanel extends javax.swing.JPanel
{
  // Constants.
  /** Table row height. */
  private final int ROW_HEIGHT = 16;
  /** The intervals title. */
  private final static java.lang.String INTERVALS = "Title.Intervals";
  /** The "Match case" title. */
  private final static java.lang.String MATCH_CASE = "Title.Match.Case";
  /** The "Match word" title. */
  private final static java.lang.String MATCH_WORD = "Title.Match.Word";
  /** The "Match word" title. */
  private final static java.lang.String MATCH_STRICT = "Title.Match.Strict";
  /** The "Regular expression" title. */
  private final static java.lang.String REGEX = "Title.Match.Regex";
  /** The "Find all" title. */
  private final static java.lang.String FIND_ALL = "Title.FindAll";
  /** The "Rough search" title. */
  private final static java.lang.String ROUGH_SEARCH = "Title.RoughSearch";
  /** The column titles. */
  private final static java.lang.String[] COLUMNS = {"Title.From", "Title.To", "Title.StartPaging", "Title.Prefix", "Title.Suffix",
    "Title.RomanNumerals", "Title.UpperCase"};
  // Indices in the above array.
  /** Index in the <code>COLUMNS</code>. */
  public final int FROM = 0;
   /** Index in the <code>COLUMNS</code>. */
  public final int TO = 1;
   /** Index in the <code>COLUMNS</code>. */
  public final int START_PAGING = 2;
  /** Index in the <code>COLUMNS</code>. */
  public final int PREFIX = 3;
  /** Index in the <code>COLUMNS</code>. */
  public final int SUFFIX = 4;
  /** Index in the <code>COLUMNS</code>. */
  public final int ROMAN = 5;
  /** Index in the <code>COLUMNS</code>. */
  public final int UPPER = 6;
  /** Defined indexing state. */
  public final int DEFINED_STATE = 0;
  /** Started indexing state. */
  public final int STARTED_STATE = 1;
  /** Stopped indexing state. */
  public final int STOPPED_STATE = 2;
 
  // Variables.
  /** The URL of the document. */
  private java.net.URL pdfURL;
  /** The password of the document, if there is. */
  private java.lang.String password;
  /** The count of pages of the document. */
  private int pageCount;
  /** The parent component. */
  private java.awt.Component parentComponent;
  /** A vector of page intervals. */
//  private java.util.Vector<com.pdfindexer.util.Interval> intervals;
  private java.util.Vector intervals;
  /** The intervals reprezenting table. */
  private IntervalsTable intervalsTable;
  /** The translated column titles. */
  private java.lang.String[] columns;
  /** The indexer. */
  private com.pdfindexer.util.Indexer indexer;
  /** This component: for inner class usage. */
  private javax.swing.JComponent thisComponent;
  
  /**
   * Constructor.
   * @param pdfURL the URL of the document.
   * @param password the encryption password, if there is.
   * @param pageCount the number of pages in the document.
   * @param parentComponent the parent component.
   */
  public IndexerPanel(java.net.URL pdfURL, java.lang.String password, int pageCount, java.awt.Component parentComponent) 
  {
    this.pdfURL = pdfURL;
    this.password = password;
    this.pageCount = pageCount;
    this.parentComponent = parentComponent;
    try
    {
      columns = new java.lang.String[COLUMNS.length];
      for(int i = 0; i < COLUMNS.length; i++)
      {
        columns[i] = com.pdfindexer.util.Util.translate(COLUMNS[i]);
      }
      initComponents();
      indexEditorPane.putClientProperty(javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES, java.lang.Boolean.TRUE);
      intervals = new java.util.Vector();
      intervals.add(new com.pdfindexer.util.Interval(1, pageCount));
      intervalsTable = new IntervalsTable();
      intervalsScrollPane.setViewportView(intervalsTable);
      setState(DEFINED_STATE);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    intervalsPanel = new javax.swing.JPanel();
    intervalsLabel = new javax.swing.JLabel();
    intervalsScrollPane = new javax.swing.JScrollPane();
    intervalsButtonOrientationPanel = new javax.swing.JPanel();
    intervalsButtonPanel = new javax.swing.JPanel();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();
    criteriasPanel = new javax.swing.JPanel();
    matchCaseCheckBox = new javax.swing.JCheckBox();
    matchWordCheckBox = new javax.swing.JCheckBox();
    matchStrictCheckBox = new javax.swing.JCheckBox();
    regexCheckBox = new javax.swing.JCheckBox();
    findAllCheckBox = new javax.swing.JCheckBox();
    indexScrollPane = new javax.swing.JScrollPane();
    indexEditorPane = new javax.swing.JEditorPane();
    controlsPanel = new javax.swing.JPanel();
    buttonsPanel = new javax.swing.JPanel();
    symbolButton = new javax.swing.JButton();
    importButton = new javax.swing.JButton();
    exportButton = new javax.swing.JButton();
    startButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    newButton = new javax.swing.JButton();
    progressPanel = new javax.swing.JPanel();
    progressBar = new javax.swing.JProgressBar();

    setLayout(new java.awt.BorderLayout());

    intervalsPanel.setLayout(new java.awt.BorderLayout());

    intervalsLabel.setText(com.pdfindexer.util.Util.translate(INTERVALS) + ":");
    intervalsPanel.add(intervalsLabel, java.awt.BorderLayout.NORTH);

    intervalsScrollPane.setPreferredSize(new java.awt.Dimension(75, 87));
    intervalsPanel.add(intervalsScrollPane, java.awt.BorderLayout.CENTER);

    intervalsButtonOrientationPanel.setLayout(new java.awt.BorderLayout());

    intervalsButtonPanel.setLayout(new java.awt.GridLayout(0, 1));

    addButton.setText("+");
    addButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ADD).toString());
    addButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        addButtonActionPerformed(evt);
      }
    });

    intervalsButtonPanel.add(addButton);

    removeButton.setText("-");
    removeButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.REMOVE).toString());
    removeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        removeButtonActionPerformed(evt);
      }
    });

    intervalsButtonPanel.add(removeButton);

    intervalsButtonOrientationPanel.add(intervalsButtonPanel, java.awt.BorderLayout.NORTH);

    intervalsPanel.add(intervalsButtonOrientationPanel, java.awt.BorderLayout.EAST);

    criteriasPanel.setLayout(new javax.swing.BoxLayout(criteriasPanel, javax.swing.BoxLayout.Y_AXIS));

    matchCaseCheckBox.setText(com.pdfindexer.util.Util.translate(MATCH_CASE));
    criteriasPanel.add(matchCaseCheckBox);

    matchWordCheckBox.setText(com.pdfindexer.util.Util.translate(MATCH_WORD));
    criteriasPanel.add(matchWordCheckBox);

    matchStrictCheckBox.setText(com.pdfindexer.util.Util.translate(MATCH_STRICT));
    criteriasPanel.add(matchStrictCheckBox);

    regexCheckBox.setText(com.pdfindexer.util.Util.translate(REGEX));
    criteriasPanel.add(regexCheckBox);

    findAllCheckBox.setText(com.pdfindexer.util.Util.translate(FIND_ALL));
    criteriasPanel.add(findAllCheckBox);

    intervalsPanel.add(criteriasPanel, java.awt.BorderLayout.SOUTH);

    add(intervalsPanel, java.awt.BorderLayout.NORTH);

    indexEditorPane.setFont(new java.awt.Font("Dialog", 0, 11));
    indexEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener()
    {
      public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)
      {
        indexEditorPaneHyperlinkUpdate(evt);
      }
    });

    indexScrollPane.setViewportView(indexEditorPane);

    add(indexScrollPane, java.awt.BorderLayout.CENTER);

    controlsPanel.setLayout(new java.awt.BorderLayout());

    symbolButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.INSERT).toString());
    symbolButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        symbolButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(symbolButton);

    importButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.IMPORT).toString());
    importButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(importButton);

    exportButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.EXPORT).toString());
    exportButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exportButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(exportButton);

    startButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.START).toString());
    startButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        startButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(startButton);

    stopButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.STOP).toString());
    stopButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        stopButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(stopButton);

    newButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.NEW).toString());
    newButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        newButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(newButton);

    controlsPanel.add(buttonsPanel, java.awt.BorderLayout.WEST);

    progressPanel.setLayout(new javax.swing.BoxLayout(progressPanel, javax.swing.BoxLayout.X_AXIS));

    progressPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 5, 1, 5)));
    progressPanel.add(progressBar);

    controlsPanel.add(progressPanel, java.awt.BorderLayout.CENTER);

    add(controlsPanel, java.awt.BorderLayout.SOUTH);

  }
  // </editor-fold>//GEN-END:initComponents

  private void symbolButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_symbolButtonActionPerformed
  {//GEN-HEADEREND:event_symbolButtonActionPerformed
    try
    {
      SymbolsDialog symbolsDialog = new SymbolsDialog((java.awt.Frame)parentComponent, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.INSERT).toString());
      symbolsDialog.setVisible(true);
      if(symbolsDialog.getSymbol() != null)
      {
        indexEditorPane.replaceSelection(symbolsDialog.getSymbol());
      }
      indexEditorPane.requestFocusInWindow();
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_symbolButtonActionPerformed

  private void indexEditorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)//GEN-FIRST:event_indexEditorPaneHyperlinkUpdate
  {//GEN-HEADEREND:event_indexEditorPaneHyperlinkUpdate
    try
    {
      if(evt.getEventType() == javax.swing.event.HyperlinkEvent.EventType.ACTIVATED)
      {
        com.pdfindexer.util.Destination destination = com.pdfindexer.util.Destination.parse(evt.getDescription());
        java.awt.Rectangle firstRectangle = ((java.awt.Rectangle.Float)destination.getBoundingRectangles().get(0)).getBounds();
        ((PdfViewer)parentComponent).decodePage(destination.getPage(), new java.awt.Point(firstRectangle.x, firstRectangle.y + firstRectangle.height * 2),
          destination.getBoundingRectangles());
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_indexEditorPaneHyperlinkUpdate

  private void newButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newButtonActionPerformed
  {//GEN-HEADEREND:event_newButtonActionPerformed
    intervals = new java.util.Vector();
    intervals.add(new com.pdfindexer.util.Interval(1, pageCount));
    matchCaseCheckBox.setSelected(false);
    matchWordCheckBox.setSelected(false);
    matchStrictCheckBox.setSelected(false);
    regexCheckBox.setSelected(false);
    findAllCheckBox.setSelected(false);
    intervalsTable.setModel(new IntervalsTableModel());
    indexEditorPane.setText(null);
    indexEditorPane.setContentType("text/plain");
    indexEditorPane.setEditable(true);
    ((PdfViewer)parentComponent).highlightPage(null);
    setState(DEFINED_STATE);
  }//GEN-LAST:event_newButtonActionPerformed

  private void exportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportButtonActionPerformed
  {//GEN-HEADEREND:event_exportButtonActionPerformed
    try
    {
      javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
      javax.swing.filechooser.FileFilter extensionFilter = new javax.swing.filechooser.FileFilter()
      {
        /**
         * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
         */
        public boolean accept(java.io.File file)
        {
          boolean isAcceptable = true;
          if(file != null && !file.isDirectory())
          {
            java.lang.String extension = com.pdfindexer.util.Util.getFileExtension(file.getName());
            if(!"txt".equals(extension))
            {
              isAcceptable = false;
            }
          }
          return isAcceptable;
        }

        /**
         * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
         */
        public java.lang.String getDescription()
        {
          return "*.txt";
        }
      };
      fileChooser.addChoosableFileFilter(extensionFilter);
      if(fileChooser.showDialog(parentComponent, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.EXPORT).toString()) == javax.swing.JFileChooser.APPROVE_OPTION)
      {
        java.lang.String importFileName = fileChooser.getSelectedFile().getAbsolutePath();
        if(fileChooser.getFileFilter().getDescription().equals("*.txt"))
        {
          // Secure the extension ending.
          importFileName = importFileName.split("\\.txt")[0] + ".txt";
        }
        java.io.PrintWriter fileWriter = new java.io.PrintWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(importFileName)));
        for(int i = 0; i < indexer.getIndexes().size(); i++)
        {
          com.pdfindexer.util.Index iteratorIndex = (com.pdfindexer.util.Index)indexer.getIndexes().get(i);
          fileWriter.println(iteratorIndex.toLine());
        }
        fileWriter.close();
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_exportButtonActionPerformed

  private void importButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importButtonActionPerformed
  {//GEN-HEADEREND:event_importButtonActionPerformed
    try
    {
      javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
      if(fileChooser.showDialog(parentComponent, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.IMPORT).toString()) == javax.swing.JFileChooser.APPROVE_OPTION)
      {
        indexEditorPane.setPage(fileChooser.getSelectedFile().toURI().toURL());
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_importButtonActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
  {//GEN-HEADEREND:event_stopButtonActionPerformed
    if(indexer != null)
    {
      indexer.stop();
      setState(STOPPED_STATE);
    }
  }//GEN-LAST:event_stopButtonActionPerformed

  private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
  {//GEN-HEADEREND:event_startButtonActionPerformed
    try
    {
      if(indexEditorPane.getText() == null || indexEditorPane.getText().equals(""))
      {
        return;
      }
      final java.util.Vector entries = new java.util.Vector();
      java.util.StringTokenizer sT = new java.util.StringTokenizer(indexEditorPane.getText(), "\n");
      while(sT.hasMoreTokens())
      {
        try
        {
          entries.add(sT.nextToken().split("\r")[0]); // Trim carrige return, if there is any.
        }
        catch(java.lang.Exception exc)
        {
          // Digest ArrayOutOfBoundsException, which is thrown at empty line.
          // So empty entry is not added to the entries vector.
        }
      }
      com.pdfindexer.util.SwingWorker indexWorker = new com.pdfindexer.util.SwingWorker()
      {
        /**
         * Overridden method from <code>com.pdfindexer.util.SwingWorker</code>.
         */
        public java.lang.Object construct()
        {
          try
          {
            setState(STARTED_STATE);
            indexEditorPane.setEditable(false);
            indexEditorPane.setContentType("text/html");
            indexEditorPane.setText(null);
            progressBar.setValue(0);
            indexer = new com.pdfindexer.util.Indexer(pdfURL, password, entries, matchCaseCheckBox.isSelected(),
              matchWordCheckBox.isSelected(), matchStrictCheckBox.isSelected(), regexCheckBox.isSelected(),
              findAllCheckBox.isSelected(), intervals, progressBar, indexEditorPane, parentComponent);
            indexer.start();
            do
            {
              java.lang.Thread.sleep(500);
            }
            while(!indexer.isCompleted());
            setState(STOPPED_STATE);
          }
          catch(java.lang.Exception exc)
          {
            com.pdfindexer.util.Messages.showException(parentComponent, exc);
          }
          return null;
        }
      };
      indexWorker.setThreadPriority(java.lang.Thread.MIN_PRIORITY); 
      indexWorker.start();
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_startButtonActionPerformed

  private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
  {//GEN-HEADEREND:event_removeButtonActionPerformed
    try
    {
      int[] selectedRows = intervalsTable.getSelectedRows();
      for(int i = selectedRows.length - 1; i >= 0; i--)
      {
        intervals.remove(((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).getValueAt(selectedRows[i], 0));
        intervalsTable.setModel(new IntervalsTableModel());
//        ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).removeRow(selectedRows[i]);
      }
      if(selectedRows.length > 0)
      {
        setState(DEFINED_STATE);
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_removeButtonActionPerformed

  private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
  {//GEN-HEADEREND:event_addButtonActionPerformed
    try
    {
      int toIndex = 0;
      for(int i = 0; i < intervalsTable.getColumnCount(); i++)
      {
        if(intervalsTable.getColumnName(i).equals(columns[TO]))
        {
          toIndex = i;
          break;
        }
      }
      int rowCount = intervalsTable.getRowCount();
      int from = (rowCount == 0 ? 1 : ((com.pdfindexer.util.Interval)intervalsTable.getModel().getValueAt(rowCount - 1, toIndex)).getToPage() + 1);
      int to = pageCount;
      com.pdfindexer.util.Interval interval = new com.pdfindexer.util.Interval(from, to);
      java.lang.Object[] rowObjects = new java.lang.Object[columns.length];
      for(int i = 0; i < rowObjects.length; i++)
      {
        rowObjects[i] = interval;
      }
      ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).addRow(rowObjects);
      intervals.add(interval);
      setState(DEFINED_STATE);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(parentComponent, exc);
    }
  }//GEN-LAST:event_addButtonActionPerformed
  
  /**
   * Method for setting the state of this panel.
   * @param state the new state.
   */
  public void setState(int state)
  {
    int index = 0;
    for(index = 0; index < intervalsTable.getColumnCount(); index++)
    {
      if(intervalsTable.getColumnName(index).equals(columns[TO]))
      {
        break;
      }
    }
    int toValue = (intervalsTable.getRowCount() == 0 ? 1 : ((com.pdfindexer.util.Interval)intervalsTable.getValueAt(intervalsTable.getRowCount() - 1, index)).getToPage());
    addButton.setEnabled(state == DEFINED_STATE && toValue != pageCount);
    removeButton.setEnabled(state == DEFINED_STATE && intervalsTable.getSelectedRows().length > 0);
    startButton.setVisible(state == DEFINED_STATE);
    stopButton.setVisible(state == STARTED_STATE);
    newButton.setVisible(state == STOPPED_STATE);
    progressBar.setVisible(state == STARTED_STATE);
    symbolButton.setVisible(state == DEFINED_STATE);
    importButton.setVisible(state == DEFINED_STATE);
    exportButton.setVisible(state == STOPPED_STATE);
    matchCaseCheckBox.setEnabled(state == DEFINED_STATE);
    matchWordCheckBox.setEnabled(state == DEFINED_STATE);
    matchStrictCheckBox.setEnabled(state == DEFINED_STATE);
    regexCheckBox.setEnabled(state == DEFINED_STATE);
    findAllCheckBox.setEnabled(state == DEFINED_STATE);
    intervalsTable.setEnabled(state == DEFINED_STATE);
  }
  
  /**
   * Inner class for reprezenting <CODE>elv.task.parameters.Intervals</CODE>.
   */
  private class IntervalsTable extends javax.swing.JTable
  {
    /**
     * Constructor.
     */
    public IntervalsTable()
    {
      super();
      setRowHeight(ROW_HEIGHT);
      setModel(new IntervalsTableModel());
    }
    
    /**
     * Overridden method from <CODE>javax.swing.JTable</CODE>.
     */
    public javax.swing.table.TableCellRenderer getCellRenderer(int row, int column)
    {
      return new IntervalsTableCellRenderer();
    }

    /**
     * Overridden method from <CODE>javax.swing.JTable</CODE>.
     */
    public javax.swing.table.TableCellEditor getCellEditor(int row, int column)
    {
      return new IntervalsTableCellEditor();
    }
  }
  
  /**
   * Inner class for table model.
   */
  private class IntervalsTableModel extends javax.swing.table.DefaultTableModel
  {
    
    /**
     * Constructor.
     */
    public IntervalsTableModel()
    {
      for(int i = 0; i < columns.length; i++)
      {
        java.lang.String iteratorColumn = columns[i];
        addColumn(iteratorColumn);
      }
      for(int i = 0; i < intervals.size(); i++)
      {
        com.pdfindexer.util.Interval iteratorInterval = (com.pdfindexer.util.Interval)intervals.get(i);
        java.lang.Object[] rowObjects = new java.lang.Object[columns.length];
        for(int j = 0; j < rowObjects.length; j++)
        {
          rowObjects[j] = iteratorInterval;
        }
        addRow(rowObjects);
      }
    }

    /**
     * Overridden method from <CODE>javax.swing.table.DefaultTableModel</CODE>.
     */
    public boolean isCellEditable(int row, int column)
    {
      boolean isEditable = true;
      if(thisComponent != null)
      {
       isEditable = thisComponent.isEnabled();
      }
      return isEditable;
    }
  }
  
  /**
   * Inner class for cell rendering.
   */
  private class IntervalsTableCellRenderer extends javax.swing.table.DefaultTableCellRenderer
  {

    /**
     * Overridden method from <CODE>javax.swing.table.DefaultTableCellRenderer</CODE>.
     */
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object cellObject, boolean isSelected, boolean hasFocus, int row, int column)
    {
      super.getTableCellRendererComponent(table, cellObject, isSelected, hasFocus, row, column);
      com.pdfindexer.util.Interval interval = (com.pdfindexer.util.Interval)cellObject;
      if(table.getColumnName(column).equals(columns[FROM]))
      {
        setText(java.lang.String.valueOf(interval.getFromPage()));
      }
      else if(table.getColumnName(column).equals(columns[TO]))
      {
        setText(java.lang.String.valueOf(interval.getToPage()));
      }
      else if(table.getColumnName(column).equals(columns[START_PAGING]))
      {
        setText(java.lang.String.valueOf(interval.getStartPaging()));
      }
      else if(table.getColumnName(column).equals(columns[PREFIX]))
      {
        setText(interval.getPrefix());
      }
      else if(table.getColumnName(column).equals(columns[SUFFIX]))
      {
        setText(interval.getSuffix());
      }
      else if(table.getColumnName(column).equals(columns[ROMAN]))
      {
        return new javax.swing.JCheckBox("", interval.isRoman());
      }
      else if(table.getColumnName(column).equals(columns[UPPER]))
      {
        return new javax.swing.JCheckBox("", interval.isUpperCase());
      }
      return this;
    }
  }
  
  /**
   * Inner class for cell editing.
   */
  private class IntervalsTableCellEditor extends javax.swing.DefaultCellEditor
  {
    /**
     * Variable.
     */
    private com.pdfindexer.util.Interval interval;
    
    /**
     * Constructor.
     */
    public IntervalsTableCellEditor()
    {
      super(new javax.swing.JTextField());
      setClickCountToStart(1);
    }
    
    /**
     * Overridden method from <CODE>javax.swing.DefaultCellEditor</CODE>.
     */
    public java.lang.Object getCellEditorValue()
    {
      return interval;
    }
        
    /**
     * Overridden method from <CODE>javax.swing.DefaultCellEditor</CODE>.
     */
    public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, java.lang.Object cellObject, boolean isSelected, int row, int column)
    {
      interval = (com.pdfindexer.util.Interval)cellObject;
      final int thisRow = row;
      final int thisColumn = column;
      java.awt.Component editorComponent = null;
      removeButton.setEnabled(true);
      if(table.getColumnName(column).equals(columns[FROM]) || table.getColumnName(column).equals(columns[TO]))
      {
        final javax.swing.JComboBox editorComboBox = new javax.swing.JComboBox();
        int fromIndex = 0;
        int toIndex = 0;
        for(int i = 0; i < table.getColumnCount(); i++)
        {
          if(table.getColumnName(i).equals(columns[FROM]))
          {
            fromIndex = i;
          }
          if(table.getColumnName(i).equals(columns[TO]))
          {
            toIndex = i;
          }
        }
        int from = 0;
        int to = 0;
        int value = 0;
        if(table.getColumnName(column).equals(columns[FROM]))
        {
          from = (row == 0 ? 1 : ((com.pdfindexer.util.Interval)table.getModel().getValueAt(row - 1, toIndex)).getToPage() + 1);
          to = interval.getToPage();
          value = interval.getFromPage();
        }
        else
        {
          from = interval.getFromPage();
          to = (row == table.getRowCount() - 1 ? pageCount : ((com.pdfindexer.util.Interval)table.getModel().getValueAt(row + 1, fromIndex)).getFromPage() - 1);
          value = interval.getToPage();
        }
        final javax.swing.JSpinner editorSpinner = new javax.swing.JSpinner();
        editorSpinner.setModel(new javax.swing.SpinnerNumberModel(value, from, to, 1));
        editorSpinner.addChangeListener(new javax.swing.event.ChangeListener()
        {
          public void stateChanged(javax.swing.event.ChangeEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(intervalsTable.getColumnName(thisColumn).equals(columns[FROM]))
            {
              if(!new java.lang.Integer(interval.getFromPage()).equals(editorValue))
              {
                interval.setFromPage(((java.lang.Integer)editorValue).intValue());
              }
            }
            else
            {
              if(!new java.lang.Integer(interval.getToPage()).equals(editorValue))
              {
                interval.setToPage(((java.lang.Integer)editorValue).intValue());
                addButton.setEnabled(interval.getToPage() != pageCount);
              }
            }
          }
        });
        javax.swing.JSpinner.NumberEditor numberEditor = (javax.swing.JSpinner.NumberEditor)editorSpinner.getEditor();
        numberEditor.getFormat().setGroupingUsed(false);
        final javax.swing.JFormattedTextField editorField = numberEditor.getTextField();
        editorField.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editorField.selectAll();
        editorField.addCaretListener(new javax.swing.event.CaretListener()
        {
          public void caretUpdate(javax.swing.event.CaretEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(intervalsTable.getColumnName(thisColumn).equals(columns[FROM]))
            {
              if(!new java.lang.Integer(interval.getFromPage()).equals(editorValue))
              {
                interval.setFromPage(((java.lang.Integer)editorValue).intValue());
              }
            }
            else
            {
              if(!new java.lang.Integer(interval.getToPage()).equals(editorValue))
              {
                interval.setToPage(((java.lang.Integer)editorValue).intValue());
                addButton.setEnabled(interval.getToPage() != pageCount);
              }
            }
            ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).fireTableCellUpdated(thisRow, thisColumn);
          }
        });
        editorField.addActionListener(new java.awt.event.ActionListener()
        {
          public void actionPerformed(java.awt.event.ActionEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(intervalsTable.getColumnName(thisColumn).equals(columns[FROM]))
            {
              if(!new java.lang.Integer(interval.getFromPage()).equals(editorValue))
              {
                interval.setFromPage(((java.lang.Integer)editorValue).intValue());
              }
            }
            else
            {
              if(!new java.lang.Integer(interval.getToPage()).equals(editorValue))
              {
                interval.setToPage(((java.lang.Integer)editorValue).intValue());
                addButton.setEnabled(interval.getToPage() != pageCount);
              }
            }
            fireEditingStopped();
          }
        });
        editorComponent = editorSpinner;
      }
      else if(table.getColumnName(column).equals(columns[START_PAGING]))
      {
        final javax.swing.JSpinner editorSpinner = new javax.swing.JSpinner();
        editorSpinner.setModel(new javax.swing.SpinnerNumberModel(interval.getStartPaging(), 1, java.lang.Integer.MAX_VALUE, 1));
        editorSpinner.addChangeListener(new javax.swing.event.ChangeListener()
        {
          public void stateChanged(javax.swing.event.ChangeEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(!new java.lang.Integer(interval.getStartPaging()).equals(editorValue))
            {
              interval.setStartPaging(((java.lang.Integer)editorValue).intValue());
            }
          }
        });
        javax.swing.JSpinner.NumberEditor numberEditor = (javax.swing.JSpinner.NumberEditor)editorSpinner.getEditor();
        numberEditor.getFormat().setGroupingUsed(false);
        final javax.swing.JFormattedTextField editorField = numberEditor.getTextField();
        editorField.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editorField.selectAll();
        editorField.addCaretListener(new javax.swing.event.CaretListener()
        {
          public void caretUpdate(javax.swing.event.CaretEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(!new java.lang.Integer(interval.getStartPaging()).equals(editorValue))
            {
              interval.setStartPaging(((java.lang.Integer)editorValue).intValue());
            }
            ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).fireTableCellUpdated(thisRow, thisColumn);
          }
        });
        editorField.addActionListener(new java.awt.event.ActionListener()
        {
          public void actionPerformed(java.awt.event.ActionEvent evt)
          {
            java.lang.Object editorValue = editorSpinner.getModel().getValue();
            if(!new java.lang.Integer(interval.getStartPaging()).equals(editorValue))
            {
              interval.setStartPaging(((java.lang.Integer)editorValue).intValue());
            }
            fireEditingStopped();
          }
        });
        editorComponent = editorSpinner;
      }
      else if(table.getColumnName(column).equals(columns[PREFIX]) || table.getColumnName(column).equals(columns[SUFFIX]))
      {
        final javax.swing.JTextField editorField = new javax.swing.JTextField();
        if(table.getColumnName(column).equals(columns[PREFIX]))
        {
          editorField.setText(interval.getPrefix());
          editorField.addCaretListener(new javax.swing.event.CaretListener()
          {
            public void caretUpdate(javax.swing.event.CaretEvent evt)
            {
              if(!interval.getPrefix().equals(editorField.getText()))
              {
                interval.setPrefix(editorField.getText());
              }
            }
          });
          editorField.addActionListener(new java.awt.event.ActionListener()
          {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
              if(!interval.getPrefix().equals(editorField.getText()))
              {
                interval.setPrefix(editorField.getText());
              }
              fireEditingStopped();
            }
          });
        }
        else
        {
          editorField.setText(interval.getSuffix());
          editorField.addCaretListener(new javax.swing.event.CaretListener()
          {
            public void caretUpdate(javax.swing.event.CaretEvent evt)
            {
              if(!interval.getSuffix().equals(editorField.getText()))
              {
                interval.setSuffix(editorField.getText());
              }
            }
          });
          editorField.addActionListener(new java.awt.event.ActionListener()
          {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
              if(!interval.getSuffix().equals(editorField.getText()))
              {
                interval.setSuffix(editorField.getText());
              }
              fireEditingStopped();
            }
          });
        }
        editorComponent = editorField;
      }
      else if(table.getColumnName(column).equals(columns[ROMAN]) || table.getColumnName(column).equals(columns[UPPER]))
      {
        final javax.swing.JCheckBox editorCheckBox = new javax.swing.JCheckBox();
        if(table.getColumnName(column).equals(columns[ROMAN]))
        {
          editorCheckBox.setSelected(interval.isRoman());
          editorCheckBox.addActionListener(new java.awt.event.ActionListener()
          {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
              if(interval.isRoman() != editorCheckBox.isSelected())
              {
                interval.setRoman(editorCheckBox.isSelected());
              }
              fireEditingStopped();
            }
          });
        }
        else
        {
          editorCheckBox.setSelected(interval.isUpperCase());
          editorCheckBox.addActionListener(new java.awt.event.ActionListener()
          {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
              if(interval.isUpperCase() != editorCheckBox.isSelected())
              {
                interval.setUpperCase(editorCheckBox.isSelected());
              }
              fireEditingStopped();
            }
          });
        }
        editorComponent = editorCheckBox;
      }
      return editorComponent;
    }
    
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JPanel buttonsPanel;
  private javax.swing.JPanel controlsPanel;
  private javax.swing.JPanel criteriasPanel;
  private javax.swing.JButton exportButton;
  private javax.swing.JCheckBox findAllCheckBox;
  private javax.swing.JButton importButton;
  private javax.swing.JEditorPane indexEditorPane;
  private javax.swing.JScrollPane indexScrollPane;
  private javax.swing.JPanel intervalsButtonOrientationPanel;
  private javax.swing.JPanel intervalsButtonPanel;
  private javax.swing.JLabel intervalsLabel;
  private javax.swing.JPanel intervalsPanel;
  private javax.swing.JScrollPane intervalsScrollPane;
  private javax.swing.JCheckBox matchCaseCheckBox;
  private javax.swing.JCheckBox matchStrictCheckBox;
  private javax.swing.JCheckBox matchWordCheckBox;
  private javax.swing.JButton newButton;
  private javax.swing.JProgressBar progressBar;
  private javax.swing.JPanel progressPanel;
  private javax.swing.JCheckBox regexCheckBox;
  private javax.swing.JButton removeButton;
  private javax.swing.JButton startButton;
  private javax.swing.JButton stopButton;
  private javax.swing.JButton symbolButton;
  // End of variables declaration//GEN-END:variables
  
}
