/*
 * SymbolsDialog.java
 */

package com.pdfindexer.gui;

/**
 * Class for reprezenting character symbols.
 * @author  Qpa
 */
public class SymbolsDialog extends javax.swing.JDialog
{
  // Constants.
  /** Font size of the symbols. */ 
  private final int FONT_SIZE = 24;
  /** The minimal size of a symbol-button. */
  private final int BUTTON_MIN_SIZE = 55;
  /** The dialog width. */
  private final int DIALOG_WIDTH = 500;
  /** The dialog height. */
  private final int DIALOG_HEIGHT = 400;
  
  // Variable.
  /** The selected character symbol. */
  java.lang.String symbol = null;
  
  /**
   * Constructor.
   */
  public SymbolsDialog(java.awt.Frame parentFrame, java.lang.String title)
  {
    super(parentFrame, title, true);
    initComponents();
    initSymbols();
    setBounds(parentFrame.getX() + (parentFrame.getWidth() - DIALOG_WIDTH) / 2,
      parentFrame.getY() + (parentFrame.getHeight() - DIALOG_HEIGHT) / 2, DIALOG_WIDTH, DIALOG_HEIGHT);
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    symbolsButtonGroup = new javax.swing.ButtonGroup();
    symbolsScrollPane = new javax.swing.JScrollPane();
    symbolsToolBar = new javax.swing.JToolBar();
    buttonsPanel = new javax.swing.JPanel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentResized(java.awt.event.ComponentEvent evt)
      {
        formComponentResized(evt);
      }
    });

    symbolsToolBar.setFloatable(false);
    symbolsScrollPane.setViewportView(symbolsToolBar);

    getContentPane().add(symbolsScrollPane, java.awt.BorderLayout.CENTER);

    okButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.OK).toString());
    okButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        okButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(okButton);

    cancelButton.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.CANCEL).toString());
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(cancelButton);

    getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);

  }
  // </editor-fold>//GEN-END:initComponents

  private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
  {//GEN-HEADEREND:event_formComponentResized
    int columnCount = symbolsToolBar.getWidth() / BUTTON_MIN_SIZE;
    columnCount = columnCount == 0 ? 1 : columnCount;
    symbolsToolBar.setLayout(new java.awt.GridLayout(0, columnCount));
  }//GEN-LAST:event_formComponentResized

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    symbol = null;
    setVisible(false);
    dispose();
    return;
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
  {//GEN-HEADEREND:event_okButtonActionPerformed
    setVisible(false);
    dispose();
    return;
  }//GEN-LAST:event_okButtonActionPerformed
  
  /**
   * Method for initializing the symbols.
   */
  private void initSymbols()
  {
    for(int i = java.lang.Integer.decode("0x00C0"); i < java.lang.Integer.decode("0x017F"); i++)
    {
      addSymbol((char)i);
    }
    for(int i = java.lang.Integer.decode("0x0385"); i < java.lang.Integer.decode("0x03CE"); i++)
    {
      addSymbol((char)i);
    }
    symbolsScrollPane.getVerticalScrollBar().setUnitIncrement(BUTTON_MIN_SIZE);
    int columnCount = symbolsToolBar.getWidth() / BUTTON_MIN_SIZE;
    columnCount = columnCount == 0 ? 1 : columnCount;
    symbolsToolBar.setLayout(new java.awt.GridLayout(0, columnCount));
  }
  
  /**
   * Method for adding the given symbol.
   */
  private void addSymbol(char symbolCharacter)
  {
    final javax.swing.JToggleButton symbolButton = new javax.swing.JToggleButton();
    symbolButton.setFont(new java.awt.Font("Dialog", 0, FONT_SIZE));
//      symbolButton.setText(java.lang.String.valueOf(java.lang.Character.toChars(i)));
    symbolButton.setText(java.lang.String.valueOf(symbolCharacter));
    symbolButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        symbol = symbolButton.getText();
      }
    });
    symbolsButtonGroup.add(symbolButton);
    symbolsToolBar.add(symbolButton);
  }
  
  /**
   * Method for getting the selected symbol.
   * @return the selected symbol.
   */
  public java.lang.String getSymbol()
  {
    return symbol;
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonsPanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton okButton;
  private javax.swing.ButtonGroup symbolsButtonGroup;
  private javax.swing.JScrollPane symbolsScrollPane;
  private javax.swing.JToolBar symbolsToolBar;
  // End of variables declaration//GEN-END:variables
  
}
