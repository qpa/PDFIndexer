/*
 * PdfReader.java
 */
package com.pdfindexer.gui;

/**
 * Class for PDF document reading.
 * @author Qpa
 */
public class PdfReader extends javax.swing.JFrame
{
  // Constants.
  /** The application title. */
  private final static java.lang.String TITLE = "Title";
  /** The password tile. */
  public final static java.lang.String PASSWORD = "Title.Password";
  /** Horizontal gap between the pane and the page. */
  private final int HORIZONTAL_INSET = 10;
  /** Vertical gap between the pane and the page. */
  private final int VERTICAL_INSET = 10;
  /** Bordering line width. */
  private final int LINE_WIDTH = 1;
  /** Page thumbnail height. */
  private final int THUMBNAIL_HEIGHT = 80;
  /** Page thumbnail width. */
  private final int THUMBNAIL_WIDTH = 60;
  /** Predefined zoom values. */
  public final java.lang.String[] ZOOM_VALUES = {"25%", "50%", "75%", "100%", "125%", "150%", "200%", "250%", "500%", "750%", "1000%",
    com.pdfindexer.util.Action.NAMES[com.pdfindexer.util.Action.PAGE_ZOOM],
    com.pdfindexer.util.Action.NAMES[com.pdfindexer.util.Action.SIZE_ZOOM],
    com.pdfindexer.util.Action.NAMES[com.pdfindexer.util.Action.WIDTH_ZOOM]};
  // Indices in the above array.
  /** Index in the <code>ZOOM_VALUES</code>. */
  public final int PAGE = 11;
  /** Index in the <code>ZOOM_VALUES</code>. */
  public final int SIZE = 12;
  /** Index in the <code>ZOOM_VALUES</code>. */
  public final int WIDTH = 13;
   /** Predefined rotation values. */
  private final java.lang.String[] ROTATION_VALUES = {"0°", "90°", "180°", "270°"};
  
  // Variables.
  /** The the document. */
  private org.pdfbox.pdmodel.PDDocument pdDocument;
  /** The password of the document, if needed. */
  private java.lang.String password;
  /** The current page number. */
  private int currentPage = -1;
  /** The current document page. */
  private org.pdfbox.pdmodel.PDPage currentPDPage;
  /** The current zoom value. */
  private float zoomValue = 1; // 1 = 100%.
  /** The localized predefined zoom values. */
  private java.lang.String[] zoomValues;
  /** The current rotation value. */
  private int rotationValue = 0; // 0 = 0°.
  /** This component: for inner class usage. */
  private java.awt.Component thisComponent;
  /** The wheel moving counter. */
  private int wheelMovedCount = 1;
  
  /**
   * Constructor.
   */
  public PdfReader()
  {
    try
    {
      thisComponent = this;
      zoomValues = ZOOM_VALUES;
      zoomValues[PAGE] = com.pdfindexer.util.Util.translate(zoomValues[PAGE]);
      zoomValues[SIZE] = com.pdfindexer.util.Util.translate(zoomValues[SIZE]);
      zoomValues[WIDTH] = com.pdfindexer.util.Util.translate(zoomValues[WIDTH]);
      try
      {
        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
      }
       catch(java.lang.Exception ex)
      {
        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
      }
      setIconImage( new javax.swing.ImageIcon(getClass().getResource("/resources/images/book_open.gif")).getImage());
      setTitle(com.pdfindexer.util.Util.translate(TITLE));
      initComponents();
      initPdf();
      // Set help broker.
      java.lang.String helpSetName = "resources/help/help.hs";
      java.net.URL helpSetURL = javax.help.HelpSet.findHelpSet(getClass().getClassLoader(), helpSetName, com.pdfindexer.util.Util.getActualLocale());
      javax.help.HelpSet helpSet = new javax.help.HelpSet(null, helpSetURL);
      javax.help.HelpBroker helpBroker = helpSet.createHelpBroker();
      contentsMenuItem.addActionListener(new javax.help.CSH.DisplayHelpFromSource(helpBroker));
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    topToolBar = new javax.swing.JToolBar();
    zoomComboBox = new javax.swing.JComboBox();
    firstButton = new javax.swing.JButton();
    previousButton = new javax.swing.JButton();
    pageCountTextField = new javax.swing.JTextField();
    nextButton = new javax.swing.JButton();
    lastButton = new javax.swing.JButton();
    rotationComboBox = new javax.swing.JComboBox();
    pdfSplitPane = new javax.swing.JSplitPane();
    navigationTabbedPane = new javax.swing.JTabbedPane();
    bookmarkScrollPane = new javax.swing.JScrollPane();
    bookmarkTree = new javax.swing.JTree();
    thumbnailScrollPane = new javax.swing.JScrollPane();
    thumbnailToolBar = new javax.swing.JToolBar();
    indexPanel = new javax.swing.JPanel();
    pdfScrollPane = new javax.swing.JScrollPane();
    pdfPanel = new javax.swing.JPanel();
    bottomPanel = new javax.swing.JPanel();
    progressPanel = new javax.swing.JPanel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    openMenuItem = new javax.swing.JMenuItem();
    closeMenuItem = new javax.swing.JMenuItem();
    fileSeparator = new javax.swing.JSeparator();
    exitMenuItem = new javax.swing.JMenuItem();
    viewMenu = new javax.swing.JMenu();
    zoomMenuItem = new javax.swing.JMenuItem();
    pageZoomMenuItem = new javax.swing.JMenuItem();
    sizeZoomMenuItem = new javax.swing.JMenuItem();
    widthZoomMenuItem = new javax.swing.JMenuItem();
    topViewSeparator = new javax.swing.JSeparator();
    goMenu = new javax.swing.JMenu();
    firstMenuItem = new javax.swing.JMenuItem();
    previousMenuItem = new javax.swing.JMenuItem();
    nextMenuItem = new javax.swing.JMenuItem();
    lastMenuItem = new javax.swing.JMenuItem();
    pageMenuItem = new javax.swing.JMenuItem();
    rotateMenu = new javax.swing.JMenu();
    zeroMenuItem = new javax.swing.JMenuItem();
    ninetyMenuItem = new javax.swing.JMenuItem();
    oneeightyMenuItem = new javax.swing.JMenuItem();
    twoseventyMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentsMenuItem = new javax.swing.JMenuItem();
    helpSeparator = new javax.swing.JSeparator();
    aboutMenuItem = new javax.swing.JMenuItem();

    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });

    topToolBar.setFloatable(false);
    zoomComboBox.setEditable(true);
    zoomComboBox.setMaximumRowCount(ZOOM_VALUES.length);
    zoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(zoomValues));
    zoomComboBox.setSelectedItem((int)(zoomValue * 100) + "%");
    zoomComboBox.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ZOOM).toString());
    zoomComboBox.setEnabled(false);
    zoomComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        zoomComboBoxActionPerformed(evt);
      }
    });

    topToolBar.add(zoomComboBox);

    firstButton.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.FIRST_PAGE).getIcon());
    firstButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.FIRST_PAGE).toString());
    firstButton.setBorderPainted(false);
    firstButton.setEnabled(false);
    firstButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    firstButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        firstButtonActionPerformed(evt);
      }
    });

    topToolBar.add(firstButton);

    previousButton.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PREVIOUS_PAGE).getIcon());
    previousButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PREVIOUS_PAGE).toString());
    previousButton.setBorderPainted(false);
    previousButton.setEnabled(false);
    previousButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    previousButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previousButtonActionPerformed(evt);
      }
    });

    topToolBar.add(previousButton);

    pageCountTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    pageCountTextField.setEnabled(false);
    pageCountTextField.setPreferredSize(new java.awt.Dimension(100, 19));
    pageCountTextField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pageCountTextFieldActionPerformed(evt);
      }
    });

    topToolBar.add(pageCountTextField);

    nextButton.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.NEXT_PAGE).getIcon());
    nextButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.NEXT_PAGE).toString());
    nextButton.setBorderPainted(false);
    nextButton.setEnabled(false);
    nextButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    nextButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        nextButtonActionPerformed(evt);
      }
    });

    topToolBar.add(nextButton);

    lastButton.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.LAST_PAGE).getIcon());
    lastButton.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.LAST_PAGE).toString());
    lastButton.setBorderPainted(false);
    lastButton.setEnabled(false);
    lastButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    lastButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        lastButtonActionPerformed(evt);
      }
    });

    topToolBar.add(lastButton);

    rotationComboBox.setMaximumRowCount(ROTATION_VALUES.length);
    rotationComboBox.setModel(new javax.swing.DefaultComboBoxModel(ROTATION_VALUES));
    rotationComboBox.setSelectedItem(rotationValue + "°");
    rotationComboBox.setToolTipText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ROTATE).toString());
    rotationComboBox.setEnabled(false);
    rotationComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rotationComboBoxActionPerformed(evt);
      }
    });

    topToolBar.add(rotationComboBox);

    getContentPane().add(topToolBar, java.awt.BorderLayout.NORTH);

    pdfSplitPane.setDividerLocation(300);
    pdfSplitPane.setOneTouchExpandable(true);
    pdfSplitPane.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        pdfSplitPanePropertyChange(evt);
      }
    });

    bookmarkTree.setToolTipText("");
    bookmarkTree.setCellRenderer(new BookmarkTreeCellRenderer());
    bookmarkTree.setRootVisible(false);
    bookmarkTree.setShowsRootHandles(true);
    bookmarkTree.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        bookmarkTreeMouseClicked(evt);
      }
    });

    bookmarkScrollPane.setViewportView(bookmarkTree);

    navigationTabbedPane.addTab(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.BOOKMARKS).toString(), bookmarkScrollPane);

    thumbnailScrollPane.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        thumbnailScrollPanePropertyChange(evt);
      }
    });

    thumbnailToolBar.setFloatable(false);
    thumbnailScrollPane.setViewportView(thumbnailToolBar);

    navigationTabbedPane.addTab(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.THUMBNAILS).toString(), thumbnailScrollPane);

    indexPanel.setLayout(new java.awt.BorderLayout());

    navigationTabbedPane.addTab(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.INDEXER).toString(), indexPanel);

    pdfSplitPane.setLeftComponent(navigationTabbedPane);

    pdfScrollPane.setViewportView(pdfPanel);

    pdfSplitPane.setRightComponent(pdfScrollPane);

    getContentPane().add(pdfSplitPane, java.awt.BorderLayout.CENTER);

    bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

    progressPanel.setLayout(new javax.swing.BoxLayout(progressPanel, javax.swing.BoxLayout.X_AXIS));

    progressPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 5, 1, 5)));
    progressPanel.setPreferredSize(new java.awt.Dimension(100, 18));
    bottomPanel.add(progressPanel);

    getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

    fileMenu.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.FILE).toString());
    openMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.OPEN).toString() + "...");
    openMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        openMenuItemActionPerformed(evt);
      }
    });

    fileMenu.add(openMenuItem);

    closeMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.CLOSE).toString());
    closeMenuItem.setEnabled(false);
    closeMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        closeMenuItemActionPerformed(evt);
      }
    });

    fileMenu.add(closeMenuItem);

    fileMenu.add(fileSeparator);

    exitMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.EXIT).toString());
    exitMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitMenuItemActionPerformed(evt);
      }
    });

    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    viewMenu.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.VIEW).toString());
    viewMenu.setEnabled(false);
    zoomMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ZOOM).toString() + "...");
    zoomMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        zoomMenuItemActionPerformed(evt);
      }
    });

    viewMenu.add(zoomMenuItem);

    pageZoomMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PAGE_ZOOM).toString());
    pageZoomMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pageZoomMenuItemActionPerformed(evt);
      }
    });

    viewMenu.add(pageZoomMenuItem);

    sizeZoomMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.SIZE_ZOOM).toString());
    sizeZoomMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        sizeZoomMenuItemActionPerformed(evt);
      }
    });

    viewMenu.add(sizeZoomMenuItem);

    widthZoomMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.WIDTH_ZOOM).toString());
    widthZoomMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        widthZoomMenuItemActionPerformed(evt);
      }
    });

    viewMenu.add(widthZoomMenuItem);

    viewMenu.add(topViewSeparator);

    goMenu.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.GO).toString());
    firstMenuItem.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.FIRST_PAGE).getIcon());
    firstMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.FIRST_PAGE).toString());
    firstMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        firstMenuItemActionPerformed(evt);
      }
    });

    goMenu.add(firstMenuItem);

    previousMenuItem.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PREVIOUS_PAGE).getIcon());
    previousMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PREVIOUS_PAGE).toString());
    previousMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previousMenuItemActionPerformed(evt);
      }
    });

    goMenu.add(previousMenuItem);

    nextMenuItem.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.NEXT_PAGE).getIcon());
    nextMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.NEXT_PAGE).toString());
    nextMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        nextMenuItemActionPerformed(evt);
      }
    });

    goMenu.add(nextMenuItem);

    lastMenuItem.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.LAST_PAGE).getIcon());
    lastMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.LAST_PAGE).toString());
    lastMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        lastMenuItemActionPerformed(evt);
      }
    });

    goMenu.add(lastMenuItem);

    pageMenuItem.setIcon(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PAGE).getIcon());
    pageMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PAGE).toString() + "...");
    pageMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pageMenuItemActionPerformed(evt);
      }
    });

    goMenu.add(pageMenuItem);

    viewMenu.add(goMenu);

    rotateMenu.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ROTATE).toString());
    zeroMenuItem.setText("0\u00b0");
    zeroMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        zeroMenuItemActionPerformed(evt);
      }
    });

    rotateMenu.add(zeroMenuItem);

    ninetyMenuItem.setText("90\u00b0");
    ninetyMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ninetyMenuItemActionPerformed(evt);
      }
    });

    rotateMenu.add(ninetyMenuItem);

    oneeightyMenuItem.setText("180\u00b0");
    oneeightyMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        oneeightyMenuItemActionPerformed(evt);
      }
    });

    rotateMenu.add(oneeightyMenuItem);

    twoseventyMenuItem.setText("270\u00b0");
    twoseventyMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        twoseventyMenuItemActionPerformed(evt);
      }
    });

    rotateMenu.add(twoseventyMenuItem);

    viewMenu.add(rotateMenu);

    menuBar.add(viewMenu);

    helpMenu.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.HELP).toString());
    contentsMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.CONTENTS).toString());
    contentsMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        contentsMenuItemActionPerformed(evt);
      }
    });

    helpMenu.add(contentsMenuItem);

    helpMenu.add(helpSeparator);

    aboutMenuItem.setText(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ABOUT).toString());
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        aboutMenuItemActionPerformed(evt);
      }
    });

    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-800)/2, (screenSize.height-600)/2, 800, 600);
  }
  // </editor-fold>//GEN-END:initComponents

  private void thumbnailScrollPanePropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_thumbnailScrollPanePropertyChange
  {//GEN-HEADEREND:event_thumbnailScrollPanePropertyChange
//    java.awt.image.BufferedImage thumbnail = pdfDecoder.getPageAsThumbnail(page, THUMBNAIL_HEIGHT);
//    graphics2d = (java.awt.Graphics2D)thumbnail.getGraphics();
//    graphics2d.setColor(java.awt.Color.BLACK);
//    graphics2d.draw(new java.awt.Rectangle(0, 0, thumbnail.getWidth() - 1, thumbnail.getHeight() - 1));
//    javax.swing.ImageIcon thumbnailIcon = new javax.swing.ImageIcon(thumbnail.getScaledInstance(-1, thumbnail.getHeight(), java.awt.Image.SCALE_FAST));
  }//GEN-LAST:event_thumbnailScrollPanePropertyChange

  private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_contentsMenuItemActionPerformed
  {//GEN-HEADEREND:event_contentsMenuItemActionPerformed
// TODO add your handling code here:
  }//GEN-LAST:event_contentsMenuItemActionPerformed

  private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
  {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
    com.pdfindexer.util.Messages.showOk(thisComponent, new javax.swing.JLabel("PDF Indexer"), new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ABOUT).toString());
  }//GEN-LAST:event_aboutMenuItemActionPerformed

  private void twoseventyMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_twoseventyMenuItemActionPerformed
  {//GEN-HEADEREND:event_twoseventyMenuItemActionPerformed
    rotatePage(270);
  }//GEN-LAST:event_twoseventyMenuItemActionPerformed

  private void oneeightyMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_oneeightyMenuItemActionPerformed
  {//GEN-HEADEREND:event_oneeightyMenuItemActionPerformed
    rotatePage(180);
  }//GEN-LAST:event_oneeightyMenuItemActionPerformed

  private void ninetyMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ninetyMenuItemActionPerformed
  {//GEN-HEADEREND:event_ninetyMenuItemActionPerformed
    rotatePage(90);
  }//GEN-LAST:event_ninetyMenuItemActionPerformed

  private void zeroMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zeroMenuItemActionPerformed
  {//GEN-HEADEREND:event_zeroMenuItemActionPerformed
    rotatePage(0);
  }//GEN-LAST:event_zeroMenuItemActionPerformed

  private void lastMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastMenuItemActionPerformed
  {//GEN-HEADEREND:event_lastMenuItemActionPerformed
    try
    {
      showPage(pdDocument.getPageCount() - 1);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_lastMenuItemActionPerformed

  private void pageMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pageMenuItemActionPerformed
  {//GEN-HEADEREND:event_pageMenuItemActionPerformed
    try
    {
      javax.swing.JSpinner pageSpinner = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(currentPage + 1, 1, pdDocument.getPageCount(), 1));
      int returnOption = com.pdfindexer.util.Messages.showOkCancel(thisComponent, pageSpinner, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.PAGE).toString());
      if(returnOption == javax.swing.JOptionPane.OK_OPTION)
      {
        showPage((java.lang.Integer)pageSpinner.getValue());
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_pageMenuItemActionPerformed

  private void nextMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextMenuItemActionPerformed
  {//GEN-HEADEREND:event_nextMenuItemActionPerformed
    showPage(currentPage + 1);
  }//GEN-LAST:event_nextMenuItemActionPerformed

  private void previousMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousMenuItemActionPerformed
  {//GEN-HEADEREND:event_previousMenuItemActionPerformed
    showPage(currentPage - 1);
  }//GEN-LAST:event_previousMenuItemActionPerformed

  private void firstMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstMenuItemActionPerformed
  {//GEN-HEADEREND:event_firstMenuItemActionPerformed
    showPage(0);
  }//GEN-LAST:event_firstMenuItemActionPerformed

  private void widthZoomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_widthZoomMenuItemActionPerformed
  {//GEN-HEADEREND:event_widthZoomMenuItemActionPerformed
    zoomPage(zoomValues[WIDTH]);
  }//GEN-LAST:event_widthZoomMenuItemActionPerformed

  private void sizeZoomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sizeZoomMenuItemActionPerformed
  {//GEN-HEADEREND:event_sizeZoomMenuItemActionPerformed
    zoomPage(zoomValues[SIZE]);
  }//GEN-LAST:event_sizeZoomMenuItemActionPerformed

  private void pageZoomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pageZoomMenuItemActionPerformed
  {//GEN-HEADEREND:event_pageZoomMenuItemActionPerformed
    zoomPage(zoomValues[PAGE]);
  }//GEN-LAST:event_pageZoomMenuItemActionPerformed

  private void zoomMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zoomMenuItemActionPerformed
  {//GEN-HEADEREND:event_zoomMenuItemActionPerformed
    javax.swing.JSpinner pageSpinner = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(zoomValue * 100, 1, 1000, 1));
    int returnOption = com.pdfindexer.util.Messages.showOkCancel(thisComponent, pageSpinner, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.ZOOM).toString());
    if(returnOption == javax.swing.JOptionPane.OK_OPTION)
    {
      zoomPage(pageSpinner.getValue().toString());
    }
  }//GEN-LAST:event_zoomMenuItemActionPerformed

  private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeMenuItemActionPerformed
  {//GEN-HEADEREND:event_closeMenuItemActionPerformed
    try
    {
      closePdf();
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_closeMenuItemActionPerformed

  private void pdfSplitPanePropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_pdfSplitPanePropertyChange
  {//GEN-HEADEREND:event_pdfSplitPanePropertyChange
    try
    {
      int columnCount = ((javax.swing.JSplitPane)evt.getSource()).getLeftComponent().getWidth() / THUMBNAIL_HEIGHT;
      columnCount = columnCount == 0 ? 1 : columnCount;
      thumbnailToolBar.setLayout(new java.awt.GridLayout(0, columnCount));
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_pdfSplitPanePropertyChange

  private void rotationComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rotationComboBoxActionPerformed
  {//GEN-HEADEREND:event_rotationComboBoxActionPerformed
    try
    {
      java.lang.String rotationString = ((java.lang.String)((javax.swing.JComboBox)evt.getSource()).getSelectedItem()).split("°")[0].trim();
      int newRotationValue = java.lang.Integer.parseInt(rotationString);
      rotatePage(newRotationValue);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_rotationComboBoxActionPerformed

  private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openMenuItemActionPerformed
  {//GEN-HEADEREND:event_openMenuItemActionPerformed
    try
    {
      javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
      javax.swing.filechooser.FileFilter extensionFilter = new javax.swing.filechooser.FileFilter()
      {
        /**
         * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
         */
        public boolean accept(java.io.File file)
        {
          boolean isAcceptable = true;
          if(file != null && !file.isDirectory())
          {
            java.lang.String extension = com.pdfindexer.util.Util.getFileExtension(file.getName());
            if(!extension.equals("pdf"))
            {
              isAcceptable = false;
            }
          }
          return isAcceptable;
        }

        /**
         * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
         */
        public java.lang.String getDescription()
        {
          return "*.pdf";
        }
      };
      fileChooser.addChoosableFileFilter(extensionFilter);
      fileChooser.setDialogTitle(new com.pdfindexer.util.Action(com.pdfindexer.util.Action.OPEN).toString());
      if(fileChooser.showDialog(thisComponent, new com.pdfindexer.util.Action(com.pdfindexer.util.Action.OPEN).toString()) == javax.swing.JFileChooser.APPROVE_OPTION)
      {
        if(pdDocument != null)
        {
          closePdf();
        }
        openPdf(fileChooser.getSelectedFile().toURL());
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_openMenuItemActionPerformed

  private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
  {//GEN-HEADEREND:event_exitMenuItemActionPerformed
    java.lang.System.exit(0);
  }//GEN-LAST:event_exitMenuItemActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    java.lang.System.exit(0);
  }//GEN-LAST:event_formWindowClosing

  private void bookmarkTreeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_bookmarkTreeMouseClicked
  {//GEN-HEADEREND:event_bookmarkTreeMouseClicked
    javax.swing.JTree tree = (javax.swing.JTree)evt.getSource();
    javax.swing.tree.TreePath treePath = tree.getClosestPathForLocation(evt.getX(), evt.getY());
    if(treePath != null && tree.getPathBounds(treePath).contains(evt.getPoint()))
    {
      Bookmark bookmark = (Bookmark)((javax.swing.tree.DefaultMutableTreeNode)treePath.getLastPathComponent()).getUserObject();
//      showPage(item.findDestinationPage(pdDocument));
//      pdfDecoder.ensurePointIsVisible(bookmark.getPoint());
      tree.setSelectionPath(treePath);
    }
  }//GEN-LAST:event_bookmarkTreeMouseClicked

  private void zoomComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zoomComboBoxActionPerformed
  {//GEN-HEADEREND:event_zoomComboBoxActionPerformed
    try
    {
      java.lang.String zoomString = ((java.lang.String)((javax.swing.JComboBox)evt.getSource()).getSelectedItem()).split("%")[0].trim();
      zoomPage(zoomString);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_zoomComboBoxActionPerformed

  private void lastButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastButtonActionPerformed
  {//GEN-HEADEREND:event_lastButtonActionPerformed
    try
    {
      showPage(pdDocument.getPageCount() - 1);
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }//GEN-LAST:event_lastButtonActionPerformed

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
  {//GEN-HEADEREND:event_nextButtonActionPerformed
    showPage(currentPage + 1);
  }//GEN-LAST:event_nextButtonActionPerformed

  private void pageCountTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pageCountTextFieldActionPerformed
  {//GEN-HEADEREND:event_pageCountTextFieldActionPerformed
    try
    {
      java.lang.String pageString = pageCountTextField.getText().split("/")[0].trim();
      int page = java.lang.Integer.parseInt(pageString);
      showPage(page);
    }
    catch(java.lang.NumberFormatException exc)
    {
    }
    finally
    {
      try
      {
        pageCountTextField.setText((currentPage + 1) + " / " + pdDocument.getPageCount());
      }
      catch(java.lang.Exception exc)
      {
        com.pdfindexer.util.Messages.showException(thisComponent, exc);
      }
    }
  }//GEN-LAST:event_pageCountTextFieldActionPerformed

  private void previousButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousButtonActionPerformed
  {//GEN-HEADEREND:event_previousButtonActionPerformed
    showPage(currentPage - 1);
  }//GEN-LAST:event_previousButtonActionPerformed

  private void firstButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstButtonActionPerformed
  {//GEN-HEADEREND:event_firstButtonActionPerformed
    showPage(0);
  }//GEN-LAST:event_firstButtonActionPerformed
  
  /**
   * Method for initializing the PDF viewer.
   * @param documentURL the file URL.
   */
  private void initPdf() throws java.lang.Exception
  {
    topToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
    // Bookmarks.
    bookmarkTree.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
    javax.swing.tree.DefaultMutableTreeNode rootTreeNode = new javax.swing.tree.DefaultMutableTreeNode("Root");
    ((javax.swing.tree.DefaultTreeModel)bookmarkTree.getModel()).setRoot(rootTreeNode);
    // Thumbnails.
    thumbnailScrollPane.getVerticalScrollBar().setUnitIncrement(THUMBNAIL_HEIGHT);
    // Document.
    pdfScrollPane.getVerticalScrollBar().setUnitIncrement(20);
    pdfScrollPane.getHorizontalScrollBar().setUnitIncrement(20);
    pdfSplitPane.setVisible(false);
  }
  
  /**
   * Method for closing a PDF document.
   */
  private void closePdf() throws java.lang.Exception
  {
    wheelMovedCount = 1;
    currentPage = -1;
    // Disable modifications.
    closeMenuItem.setEnabled(false);
    viewMenu.setEnabled(false);
    zoomComboBox.setEnabled(false);
    rotationComboBox.setEnabled(false);
    pageCountTextField.setEnabled(false);
    firstButton.setEnabled(false);
    previousButton.setEnabled(false);
    nextButton.setEnabled(false);
    lastButton.setEnabled(false);
    // Bookmarks.
    javax.swing.tree.DefaultMutableTreeNode rootTreeNode = new javax.swing.tree.DefaultMutableTreeNode("Root");
    ((javax.swing.tree.DefaultTreeModel)bookmarkTree.getModel()).setRoot(rootTreeNode);
    // Thumbnails.
    thumbnailToolBar.removeAll();
    // Indexer.
    indexPanel.removeAll();
    // Document.
    pdDocument.close();
    pdfPanel.removeAll();
    pdfSplitPane.setVisible(false);
  }
  
  /**
   * Method for opening a PDF document.
   * @param documentURL the document URL.
   */
  private void openPdf(java.net.URL documentURL) throws java.lang.Exception
  {
    // Document.
//    pdDocument = org.pdfbox.pdmodel.PDDocument.load(documentURL.openStream());
    org.pdfbox.pdfparser.PDFParser pdfParser = new org.pdfbox.pdfparser.PDFParser(documentURL.openStream());
    pdfParser.parse();
    pdDocument = pdfParser.getPDDocument();
    if(pdDocument.isEncrypted())
    {
      javax.swing.JPasswordField pwField = new javax.swing.JPasswordField();
      int returnOption = com.pdfindexer.util.Messages.showOkCancel(thisComponent, pwField, com.pdfindexer.util.Util.translate(PASSWORD));
      if(returnOption == javax.swing.JOptionPane.OK_OPTION)
      {
        password = java.lang.String.valueOf(pwField.getPassword());
        pdDocument.decrypt(password);
      }
    }
    // Bookmarks.
    javax.swing.tree.DefaultMutableTreeNode rootTreeNode = new javax.swing.tree.DefaultMutableTreeNode("Root");
    org.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline outline =  pdDocument.getDocumentCatalog().getDocumentOutline();
    if(outline != null)
    {
      addBookmarks(outline, rootTreeNode);
    }
    ((javax.swing.tree.DefaultTreeModel)bookmarkTree.getModel()).setRoot(rootTreeNode);
    // Thumbnails.
    thumbnailScrollPane.getVerticalScrollBar().setUnitIncrement(THUMBNAIL_HEIGHT);
    int columnCount = pdfSplitPane.getLeftComponent().getWidth() / THUMBNAIL_HEIGHT;
    columnCount = columnCount == 0 ? 1 : columnCount;
    thumbnailToolBar.setLayout(new java.awt.GridLayout(0, columnCount));
    java.awt.image.BufferedImage blankThumbnail = new java.awt.image.BufferedImage(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, java.awt.image.BufferedImage.TYPE_INT_RGB);
    java.awt.Graphics2D graphics2d = (java.awt.Graphics2D)blankThumbnail.getGraphics();
    graphics2d.setColor(new java.awt.Color(240, 240, 240));
    graphics2d.fill(new java.awt.Rectangle(0,0,THUMBNAIL_WIDTH - 1, THUMBNAIL_HEIGHT - 1));
    graphics2d.setColor(java.awt.Color.BLACK);
    graphics2d.draw(new java.awt.Rectangle(0,0,THUMBNAIL_WIDTH - 1, THUMBNAIL_HEIGHT - 1));
    for(int i = 0; i < pdDocument.getPageCount(); i++)
    {
      final int page = i;
//      java.awt.image.BufferedImage thumbnail = ((org.pdfbox.pdmodel.PDPage)pages.get(i)).convertToImage();
//      javax.swing.ImageIcon thumbnailIcon = new javax.swing.ImageIcon(thumbnail.getScaledInstance(-1, THUMBNAIL_HEIGHT, java.awt.Image.SCALE_SMOOTH));
      javax.swing.ImageIcon thumbnailIcon = new javax.swing.ImageIcon(blankThumbnail.getScaledInstance(-1, blankThumbnail.getHeight(), java.awt.Image.SCALE_FAST));
      javax.swing.JButton thumbnailButton = new javax.swing.JButton(com.pdfindexer.util.Util.format(page), thumbnailIcon);
      thumbnailButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      thumbnailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
      thumbnailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
      thumbnailButton.addActionListener(new java.awt.event.ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          showPage(page);
        }
      });
      thumbnailToolBar.add(thumbnailButton);
    }
    // Indexer.
    indexPanel.add(new IndexerPanel(documentURL, password, pdDocument.getPageCount(), this));
    // Pages.
    showPage(0);
    pdfPanel.scrollRectToVisible(new java.awt.Rectangle(0, 0, 1, 1));
    pdfSplitPane.setVisible(true);
    // Enable modifications.
    closeMenuItem.setEnabled(true);
    viewMenu.setEnabled(true);
  }
  
  /**
   * Method for showing a page.
   * @param page the page number.
   */
  private void showPage(final int page)
  {
    try
    {
      if(page >= pdDocument.getPageCount() || page < 0 || page == currentPage)
      {
        return;
      }
      com.pdfindexer.util.SwingWorker swingWorker = new com.pdfindexer.util.SwingWorker()
      {
        /**
         * Overridden method from <code>com.pdfindexer.util.SwingWorker</code>.
         */
        public java.lang.Object construct()
        {
          try
          {
            // Disable modifications.
            zoomComboBox.setEnabled(false);
            rotationComboBox.setEnabled(false);
            pageCountTextField.setEnabled(false);
            firstButton.setEnabled(false);
            previousButton.setEnabled(false);
            nextButton.setEnabled(false);
            lastButton.setEnabled(false);
            goMenu.setEnabled(false);
            rotateMenu.setEnabled(false);
            // Show page.
            org.pdfbox.pdmodel.PDPage pdPage = (org.pdfbox.pdmodel.PDPage)pdDocument.getDocumentCatalog().getAllPages().get(page);
//            org.pdfbox.pdfviewer.PDFPagePanel pdfPagePanel = new org.pdfbox.pdfviewer.PDFPagePanel();
//            pdPage.setRotation(270);
            PDFPagePanel pdfPagePanel = new PDFPagePanel();
            pdfPagePanel.setPage(pdPage);
            pdfPagePanel.setPreferredSize(pdfPagePanel.getSize());
            javax.swing.JPanel pagePanel = new javax.swing.JPanel();
            pagePanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(HORIZONTAL_INSET, VERTICAL_INSET, HORIZONTAL_INSET, VERTICAL_INSET)), new javax.swing.border.LineBorder(java.awt.Color.BLACK, LINE_WIDTH)));
            pagePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
            pagePanel.add(pdfPagePanel);
            pdfPanel.removeAll();
            pdfPanel.add(pagePanel);
            pdfScrollPane.revalidate();
            pdfScrollPane.repaint();
            repaint();
            pdfPagePanel.highlight("adobe", false);
            // Set thumbnail.
            if(currentPage >= 0)
            {
              javax.swing.JButton button = (javax.swing.JButton)thumbnailToolBar.getComponentAtIndex(currentPage);
              button.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            }
            final javax.swing.JButton newButton = (javax.swing.JButton)thumbnailToolBar.getComponentAtIndex(page);
            newButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.BLUE, 2));
            java.awt.Rectangle rectangle = thumbnailToolBar.getVisibleRect();
            if (!rectangle.contains(newButton.getBounds()))
            {
              thumbnailToolBar.scrollRectToVisible(newButton.getBounds());
            }
            // Enable modifications. 
            zoomComboBox.setEnabled(true);
            rotationComboBox.setEnabled(true);
            pageCountTextField.setEnabled(true);
            goMenu.setEnabled(true);
            rotateMenu.setEnabled(true);
            firstMenuItem.setEnabled(page != 0);
            previousMenuItem.setEnabled(page != 0);
            nextMenuItem.setEnabled(page != pdDocument.getPageCount() - 1);
            lastMenuItem.setEnabled(page != pdDocument.getPageCount() - 1);
            firstButton.setEnabled(page != 0);
            previousButton.setEnabled(page != 0);
            nextButton.setEnabled(page != pdDocument.getPageCount() - 1);
            lastButton.setEnabled(page != pdDocument.getPageCount() - 1);
            currentPage = page;
            currentPDPage = pdPage;
          }
          catch(java.lang.Exception exc)
          {
            com.pdfindexer.util.Messages.showException(thisComponent, exc);
          }
          finally
          {
            try
            {
              pageCountTextField.setText((currentPage + 1) + " / " + pdDocument.getPageCount());
            }
            catch(java.lang.Exception exc)
            {
              com.pdfindexer.util.Messages.showException(thisComponent, exc);
            }
          }
          return null;
        }
      };
      swingWorker.start();
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }
  
  /**
   * Method for rotating a page.
   * @param degree the rotation degree.
   */
  private void rotatePage(int degree)
  {
    try
    {
      if(degree != rotationValue)
      {
        currentPDPage.setRotation(degree);
        repaint();
        rotationValue = degree;
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
    finally
    {
      rotationComboBox.setSelectedItem(rotationValue + "°");
    }
  }
  
  /**
   * Method for zooming a page.
   * @param zoomString the string reprezentation of the zooming option.
   */
  private void zoomPage(java.lang.String zoomString)
  {
    try
    {
      float newZoomValue = 1;
//      if(zoomString.equals(zoomValues[PAGE]))
//      {
//        int width = pdfScrollPane.getViewport().getWidth() - 2 * HORIZONTAL_INSET;
//        int height = pdfScrollPane.getViewport().getHeight() - 2 * VERTICAL_INSET;
//        org.jpedal.objects.PdfPageData pdfPageData = pdfDecoder.getPdfPageData();
//        int cropBoxWidth = pdfPageData.getCropBoxWidth(currentPage);
//        int cropBoxHeight = pdfPageData.getCropBoxHeight(currentPage);
//        float widthPercentage = (float)width / cropBoxWidth;
//        float heightPercentage = (float)height / cropBoxHeight;
//        newZoomValue = widthPercentage < heightPercentage ? widthPercentage : heightPercentage;
//      }
//      else if(zoomString.equals(zoomValues[SIZE]))
//      {
//        newZoomValue = 1;
//      }
//      else if(zoomString.equals(zoomValues[WIDTH]))
//      {
//        int width = pdfScrollPane.getViewport().getWidth() - 2 * HORIZONTAL_INSET;
//        org.jpedal.objects.PdfPageData pdfPageData = pdfDecoder.getPdfPageData();
//        int cropBoxWidth = pdfPageData.getCropBoxWidth(currentPage);
//        newZoomValue = (float)width / cropBoxWidth;
//      }
//      else
//      {
//        newZoomValue = java.lang.Float.parseFloat(zoomString) / 100;
//        if(newZoomValue <= 0 || newZoomValue > 10)
//        {
//          return;
//        }
//      }
//      pdfDecoder.setPageParameters(newZoomValue, currentPage);
//      pdfDecoder.setPageRotation(rotationValue);
//      pdfDecoder.invalidate();
      pdfScrollPane.revalidate();
      pdfScrollPane.repaint();
      repaint();
      zoomValue = newZoomValue;
    }
    catch(java.lang.NumberFormatException exc)
    {
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
    finally
    {
      zoomComboBox.setSelectedItem((int)(zoomValue * 100) + "%");
    }
  }
  
  /**
   * Method for adding the bookmarks.
   * @param node a bookmark node.
   * @param treeNode a tree node. 
   */
  private void addBookmarks(org.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode node, javax.swing.tree.DefaultMutableTreeNode treeNode)
  {
    try
    {
      org.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem iteratorItem = node.getFirstChild();
      while(iteratorItem != null)
      {
        javax.swing.tree.DefaultMutableTreeNode childTreeNode = new javax.swing.tree.DefaultMutableTreeNode(new Bookmark(iteratorItem));
        treeNode.add(childTreeNode);
        addBookmarks(iteratorItem, childTreeNode);
        iteratorItem = iteratorItem.getNextSibling();
      }
    }
    catch(java.lang.Exception exc)
    {
      com.pdfindexer.util.Messages.showException(thisComponent, exc);
    }
  }
  
  /**
   * Inner class for bookmark reprezentation.
   */
  private class Bookmark
  {
    /** The outline item of this bookmark. */
    private org.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem outlineItem;
    
    /**
     * Constructor.
     */
    public Bookmark(org.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem outlineItem)
    {
      this.outlineItem = outlineItem;
    }
    
//    /**
//     * Method for getting the page of this bookmark.
//     * @return the page number.
//     */
//    public int getPage()
//    {
//      return page;
//    }
//    
//    /**
//     * Method for getting the point of this bookmark.
//     * @return the point.
//     */
//    public java.awt.Point getPoint()
//    {
//      return point;
//    }
//    
    /**
     * Overridden method from <CODE>java.lang.Object</CODE>.
     * @return the string reprezentation of this bookmark.
     */
    public java.lang.String toString()
    {
      return outlineItem.getTitle();
    }
    
  }
  
  /**
   * Class for bookmark tree cell rendering.
   */
  public class BookmarkTreeCellRenderer extends javax.swing.tree.DefaultTreeCellRenderer
  {
    
    /**
     * Overridden method from <CODE>javax.swing.tree.DefaultTreeCellRenderer</CODE>.
     */
    public java.awt.Component getTreeCellRendererComponent(javax.swing.JTree tree, java.lang.Object treeNode, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
    {
      super.getTreeCellRendererComponent(tree, treeNode, sel, expanded, leaf, row, hasFocus);
      try
      {
        setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/page.gif")));
        setToolTipText(treeNode.toString());
      }
      catch(java.lang.Exception exc)
      {
        com.pdfindexer.util.Messages.showException(thisComponent, exc);
      }
      return this;
    }
    
  }
  
  /**
   * The main method.
   * @param args the command line arguments.
   */
  public static void main(java.lang.String[] args)
  {
    // Set the logging for the stripper.
    java.lang.System.setProperty("log4j.configuration", "resources/log4j.xml");
    final java.lang.String[] arguments = args;
    java.awt.EventQueue.invokeLater(new java.lang.Runnable()
    {
      public void run()
      {
        try
        {
          java.net.URL url = null;
          if(arguments.length == 1)
          {
            java.io.File file = new java.io.File(arguments[0]);
            if(file.exists())
            {
              url = new java.io.File(arguments[0]).toURL();
            }
            else
            {
              url = new java.net.URL(arguments[0]);
            }
          }
          PdfReader pdfReader = new PdfReader();
          if(url != null)
          {
            pdfReader.openPdf(url);
          }
          pdfReader.setVisible(true);
        }
        catch(java.lang.Exception exc)
        {
          com.pdfindexer.util.Messages.showException(null, exc);
          java.lang.System.exit(1);
        }
      }
    });
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JScrollPane bookmarkScrollPane;
  private javax.swing.JTree bookmarkTree;
  private javax.swing.JPanel bottomPanel;
  private javax.swing.JMenuItem closeMenuItem;
  private javax.swing.JMenuItem contentsMenuItem;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JSeparator fileSeparator;
  private javax.swing.JButton firstButton;
  private javax.swing.JMenuItem firstMenuItem;
  private javax.swing.JMenu goMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JSeparator helpSeparator;
  private javax.swing.JPanel indexPanel;
  private javax.swing.JButton lastButton;
  private javax.swing.JMenuItem lastMenuItem;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JTabbedPane navigationTabbedPane;
  private javax.swing.JButton nextButton;
  private javax.swing.JMenuItem nextMenuItem;
  private javax.swing.JMenuItem ninetyMenuItem;
  private javax.swing.JMenuItem oneeightyMenuItem;
  private javax.swing.JMenuItem openMenuItem;
  private javax.swing.JTextField pageCountTextField;
  private javax.swing.JMenuItem pageMenuItem;
  private javax.swing.JMenuItem pageZoomMenuItem;
  private javax.swing.JPanel pdfPanel;
  private javax.swing.JScrollPane pdfScrollPane;
  private javax.swing.JSplitPane pdfSplitPane;
  private javax.swing.JButton previousButton;
  private javax.swing.JMenuItem previousMenuItem;
  private javax.swing.JPanel progressPanel;
  private javax.swing.JMenu rotateMenu;
  private javax.swing.JComboBox rotationComboBox;
  private javax.swing.JMenuItem sizeZoomMenuItem;
  private javax.swing.JScrollPane thumbnailScrollPane;
  private javax.swing.JToolBar thumbnailToolBar;
  private javax.swing.JToolBar topToolBar;
  private javax.swing.JSeparator topViewSeparator;
  private javax.swing.JMenuItem twoseventyMenuItem;
  private javax.swing.JMenu viewMenu;
  private javax.swing.JMenuItem widthZoomMenuItem;
  private javax.swing.JMenuItem zeroMenuItem;
  private javax.swing.JComboBox zoomComboBox;
  private javax.swing.JMenuItem zoomMenuItem;
  // End of variables declaration//GEN-END:variables
  
}
